#  - make
#------------------------------
df.car_specs %>%
group_by(make_nm) %>%
summarise(make_count = length(make_nm)) %>%
arrange(desc(make_count))
# note: the list of car makes is too long so the output hasn't
#       been added here
glimpse(df.car_specs)
# EOF
library(tidyverse)
head(df.car_specs)
glimpse(df.car_specs)
ggplot(data = df.car_specs, aes(x = horsepower_bhp)) +
?geom_histogram()
library(gbm)
install.packages("gbm")
install.packages("randomForest")
install.packages("Rtsne")
library(randomForest)
library(gbm)
library(Rtsne)
?gbm
iris
dataset <- iris
head(dataset)
tail(dataset)
dim(dataset)
str(dataset)
levels(dataset$Species)
names(dataset)
glimpse(dataset)
library(dplyr)
glimpse(dataset)
summary(dataset)
mean(dataset)
head(dataset)
mean(dataset$Sepal.Length)
levels(dataset$Species)
names(dataset)
x <- dataset$Sepal.Length
y <- dataset$Sepal.Width
dim(dataset)
str(dataset)
tail(dataset)
x <- dataset$Sepal.Length
y <- dataset$Sepal.Width
mean(dataset$Sepal.Length)
median(dataset$Sepal.Length)
sd(x)
var(y)
cor(x, y)
cov(x, y)
z <- c(1,2,3,4,5,NA)
mean(z)
mean(z, na.rm = T)
mean(z, na.rm = F)
T
mean(z, na.rm = T)
summary(dataset)
str(dataset)
dataset_2 <- dataset[1:4]
View(dataset_2)
dataset_2 <- dataset[1:4]
mean(datast_2)
mean(dataset_2)
str(dataset_2)
str(dataset_2)
mean(dataset_2)
mean(dataset_2)
dframe
mean(dataset_2)
mean(dataset_2, na.rm = T)
dataset_2 <- c(x,y,z)
mean(dataset_2)
mean(dataset_2,na.rm =T)
dataset_2 <- dataset[1:4]
mean(dataset_2)
str(dataset_2)
mean(dataset_2)
x <- 1:5
1:5
1:100
seq(from = 20, to = 50, by =3)
rep(21, times = 6)
seq(from = 20, to = 50, length.out=3)
x <- c(1, pi, 3)
y <- c(pi, pi, pi)
x == y
x != y
x > y
any(x == pi)
all(x == y)
dataset <- iris
dataset
dataset[1]
dataset[1,10]
head(dataset[1])
head(dataset[1],10)
dataset[1]
head(dataset[1],10)
dataset[1:3]
x <- c(1:100)
x
x[2]
x <- c(20:200)
x[2]
x < 2
x[x<2]
x[x < 24]
x < 24
x < 24
x[x < 24]
x[x < 24] #Gives you every value in x that is less than 24
x < 24
x < 24 #Vector is true when x is greater than 24
x %% 2 == 0
x[x %% 2 == 0] # Returns all the even x values
dataset[1]
dataset[1:3]
head(dataset[1],10)
x < 24 # Vector is true when x is greater than 24
x[x < 24] # Gives you every value in x that is less than 24
x %% 2 == 0 # Vector is true when x is even
x[x %% 2 == 0] # Returns all the even x values
x[ x > median(x) ]
x[ (x < quantile(x,0.05)) | (x > quantile(x,0.95)) ]
x[ !is.na(x) & !is.null(x) ]
x[ !is.na(x) & !is.null(x) ]
x[ !is.na(x) & !is.null(x) ]
x[ (x < quantile(x,0.05)) | (x > quantile(x,0.95)) ]
x[ abs(x-mean(x)) > 2*sd(x) ]
x[ abs(x-mean(x)) > 2*sd(x) ]
x[ abs(x-mean(x)) > 2*sd(x) ]
####################################################################################################################
# Selecting Vector Elements / Selecting Columns
####################################################################################################################
# Loading Iris Dataset
dataset <- iris
x <- c(20:200)
#############################
# Selecting Columns by [ ]
#############################
dataset[1]
dataset[1:3]
head(dataset[1],10)
#############################
# Indexing Technique
#############################
x < 24 # Vector is true when x is greater than 24
x[x < 24] # Gives you every value in x that is less than 24
x %% 2 == 0 # Vector is true when x is even
x[x %% 2 == 0] # Returns all the even x values
#############################
# Indexing Technique 2
#############################
# Select all elements greater than the median
x[ x > median(x) ]
# Select all elements in the lower and upper 5%
x[ (x < quantile(x,0.05)) | (x > quantile(x,0.95)) ]
# Select all elements that exceed Â±2 standard deviations from the mean
x[ abs(x-mean(x)) > 2*sd(x) ]
# Select all elements that are neither NA nor NULL
x[ !is.na(x) & !is.null(x) ]
x[ !is.na(x) & !is.null(x) ]
x[ is.na(x) & !is.null(x) ]
x[ !is.na(x) & !is.null(x) ]
dataset$Sepal.Length
dataset["Sepal.Length"]
dataset[1]
dataset[1:3]
head(dataset[1],10)
dataset$Sepal.Length
dataset["Sepal.Length"]
name(x) <- c("One", "Two")
names(x) <- c("One", "Two")
x
x[1]
x[2]
x[3]
x[1]
x["one"]
x["One"]
x$One
dataset[1]
dataset[1:3]
head(dataset[1],10)
x[1]
x$One
x["One"]
dataset$Sepal.Length
x$One
dataset["Sepal.Length"]
dataset$Sepal.Length
dataset["Sepal.Length"]
dataset$Sepal.Length
dataset["Sepal.Length"]
#Multiple Linear Regression
####################################################################################
# Plan & Key Terms:
####################################################################################
#Assumptions of Linear Regression
# 1. Linearity
# 2. Homoscedasticity
# 3. Multivariate normality
# 4. Independence of errror
# 5. Lack of multicollinearity - Dummy Variable Trap - Always omit 1 dummy variable - R stats package fixes the DVT automatically
#Building A Model
# 1. Backward Elimination
# 2. Select SL = .05
# 3. Add all variables in the model
# 4. Eliminate highest P value - If P value > SL ==> Remove Predictor - High P value menans its not significant
# 5. Stop when you have highest adjusted R Squared
# 6. Explain in units ==> R&D Spend has a greater impact on profit per unit of R&D spend than marketing has per unit marketing spend.
#Summary
# 1. Is model Statistically Significant? Check F Statistic
# 2. Are Coefficient significant? Check coeficcient t-Statistic & p-value or check the C.I
# 3. Is Model Useful? Check the adjusted R^2
# 4. Does Model fit the data well? Plot the residuals and check regression diagnostics
# 5. Does data satisfy assumption behind linear regression?
#Tips
# F1 to get help
# t-value = std / error ==> Measures the size of the difference relative to the variation in your sample data
####################################################################################
# Libraries
####################################################################################
library(MASS)
library(ISLR)
library(ggplot2)
library(car) #For VIF
####################################################################################
# Set the WD - Macs: /  -  Windows: \\
####################################################################################
setwd("/Users/kevin8523/Desktop/Windows Stuff Moved Over/Software Tools (Python, R, Tableau,etc)/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
getwd()
####################################################################################
# Import the dataset:
####################################################################################
#Import the dataset
#dataset = read.csv('50_Startups.csv')
dataset = Boston # Public / Practice Dataset from library(MASS)
####################################################################################
# Analyze the data: Data Prep & Data Cleanse - You should usually split the dataset 80/20 or 70/30
####################################################################################
#Explore
?Boston
names(dataset)
str(dataset)
summary(dataset)
dim(dataset)
head(dataset)
####################################################################################
# Simple Linear Regression
####################################################################################
#Simple Linear Regression
lm.fit = lm(medv ~ lstat, data = dataset)
#Explore Fit of linear regression
lm.fit
summary(lm.fit) #summary table
#Additional Exploration functions
names(lm.fit) #list of functions stored in lm.fit
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval = "confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))),interval = "prediction")
#Plot Data
plot(dataset$lstat,dataset$medv) #pch = 20
abline(lm.fit, lwd = 3, col ='red')
par(mfrow=c(2,2)) # adjusts the windows
plot(lm.fit) #Plots multiple charts
par(mfrow=c(1,1))
plot(predict(lm.fit),residuals(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
#Alternate plot type
# ggplot(data = dataset) +
#   geom_point(aes(x = lstat, y = medv))+
####################################################################################
# Multiple Linear Regression
####################################################################################
#Call Individual Variables
lm.fit = lm(medv ~ lstat + age, data = Boston)
summary(lm.fit)
#All Variables
lm.fit = lm(medv ~ ., data = Boston)
summary(lm.fit)
summary(lm.fit)$r.sq
vif(lm.fit)
summary(lm.fit)
head(df)
df <- iris
head(df)
colnames(df) <- c("s_length", "_width", "p_length", "p_width", "species")
df
head(df)
df <- df[c(4,1,2,3)]
head(df)
library(dplyr)
dataset <- iris
head(dataset)
RL1 <- dataset[dataset$Species == "setosa",]
View(RL1)
head(dataset)
tail(dataset)
head(dataset)
summary(RL1)
summary(df)
Data <- read.csv(file.choose())
library(dplyr)
library(dplyr)
head(dataset)
library(dplyr)
library(ggplot2)
library(dplyr)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
df %>%
select(title,star_rating, content_rating)
df %>%
select(title,star_rating, content_rating) %>%
head()
df %>%
filter(content_rating = 'R') %>%
head()
df %>%
filter(content_rating == 'R') %>%
head()
df %>%
group_by(genere,content_rating) %>%
filter(star_rating > 8.5) %>%
summarise(count = n())
df %>%
group_by(genre,content_rating) %>%
filter(star_rating > 8.5) %>%
summarise(count = n())
df %>%
distinct(title,star_rating, content_rating) %>%
head()
df %>%
mutate(movie_length = duration / 60)
df
head(df)
df <- df %>%
mutate(movie_length_hrs = duration / 60)
head(df)
df %>%
mutate(movie_length_hrs = duration / 60)
head(df)
df %>%
arrange(duration) %>%
head(5)
df %>%
arrange(duration, desc) %>%
head(5)
df %>%
arrange(desc(duration)) %>%
head(5)
df %>%
summarize(mean(duration))
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
colnames(df)
train$content_rating[train$content_rating== 'PG-13'] <- 'Parent Guardian - 13'
df$content_rating[df$content_rating== 'PG-13'] <- 'Parent Guardian - 13'
head(df)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
str(df)
levels(df)
levels(df$content_rating)
df$content_rating[df$content_rating == "PG-13"] <- "Parent Guardian-13"
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
levels(df$content_rating)
df$content_rating[df$content_rating == "PG-13"] <- "R"
head(df)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
df$content_rating[df$content_rating == "NOT RATED"] <- "R"
head(df)
dataset <- read.csv("winequality-red.csv", sep = ";" )
setwd("~/Desktop/Github/scripts/R/dataset")
dataset <- read.csv("winequality-red.csv", sep = ";" )
View(dataset)
head(dataset)
colnames(dataset)
dataset <- read.csv("winequality-red.csv", sep = ";",
col.names = c(1,2,3,4,5,6,7,8,9,10,11,12))
View(dataset)
dataset <- read.csv("winequality-red.csv", sep = ";")
View(dataset)
filter(diamonds, min_rank(price) <= 10)
dataset <- diamonds
dataset <- diamond
dataset <- iris
View(dataset)
View(dataset)
filter(iris, min_rank(Sepal.Length) <= 10)
library(dplyr)
filter(iris, min_rank(Sepal.Length) <= 10)
select(iris, min_rank(Sepal.Length) <= 10)
select(iris, min_rank(Sepal.Length) <= 10)
filter(diamonds, min_rank(desc(price)) <= 10)
filter(iris, min_rank(desc(price)) <= 10)
dataset <- iris
select(iris, min_rank(Sepal.Length) <= 10)
diamonds
filter(diamonds, min_rank(desc(price)) <= 10)
filter(iris, min_rank(desc(price)) <= 10)
filter(iris, min_rank(desc(Sepal.Length)) <= 10)
select(iris, min_rank(Sepal.Length) <= 10)
filter(iris, min_rank(Sepal.Length) <= 10)
iris %>%
arrange(Sepal.Length)
filter(iris, min_rank(desc(Sepal.Length)) <= 10)
iris %>%
arrange(Sepal.Length)
iris %>%
arrange(Sepal.Length) %>%
tail()
filter(iris, min_rank(Sepal.Length) <= 10)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
df
head(df)
df[,-1:-3]
df <- df[,-1:-3]
df
head(df)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
df <- state.name
head(df)
head(df)
df <- state
df <- cars
head(df)
df <- mtcars
head(df)
df <- sleep
head(df)
df <- UKgas
head(df)
df <- euro
head(df)
df <- JohnsonJohnson
head(df)
df <- WWWusage
head(df)
df <- iris
head(df)
df_2 <- iris3
head(df_2)
df <- crimtab
head(df)
df <- beaver1
head(df)
df_2 <- beaver2
head(df)
head(df_2)
inner_join(df, df_2, by = "day")
df_join <- inner_join(df, df_2, by = "day")
df_2 <- beavers
df <- airmiles
df_2 <- attitude
head(df_2)
df <- attenu
head(df)
df <- Animals
df <- C02
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))
library(dplyr)
head(df1)
head(df2)
df_join <- inner_join(df1, df2, by = "CustomerId")
head(df_join)
df_join2 <- left_join(df1, df2, by = "CustomerId")
head(df_join2)
df_join2 <- left_join(df1, df2, by = "CustomerId", all.x = TRUE)
head(df_join2)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
df %>%
select %>%
str_replace("aaXaaX", "X", "B")
library(stringr)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
str_replace("aaXaaX", "X", "B")
str_replace_all("aaXaaX", "X", "B")
library(tidyr)
head(revenue_2_untidy)
df <- read.csv(url("https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/imdb_1000.csv"))
head(df)
head(df)
head(df)
spread(df , content_rating, title)
df2 <- spread(df , content_rating, title)
head(df2)
df2 <- spread(df , content_rating)
df2 <- spread(df , content_rating, ratings)
title
df2 <- spread(df , content_rating, title)
head(df2)
df2 <- spread(df , content_rating, genre)
head(df2)
head(df)
df2 <- spread(df , content_rating, genre)
head(df2)
